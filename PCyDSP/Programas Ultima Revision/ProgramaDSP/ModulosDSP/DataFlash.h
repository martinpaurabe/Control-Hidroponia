/** ###################################################################
**     THIS COMPONENT MODULE IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
**     Filename  : DataFlash.H
**     Project   : demo_serial_bootloader
**     Processor : 56F8323
**     Component : IntFLASH
**     Version   : Component 02.362, Driver 02.07, CPU db: 2.87.081
**     Compiler  : Metrowerks DSP C Compiler
**     Date/Time : 27/11/2020, 18:24
**     Abstract  :
**         This bean "IntFLASH" implements an access to internal FLASH.
**         The bean support reading/writing data into FLASH, erasing of
**         selected sector.
**         The bean supports events if the write interrupt is supported.
**         The bean supports following modes of write operations:
**           - Write - writing without any test.
**           - Destructive write - sector is erased if necessary.
**           - Safe write - user event is invoked to save and resore data
**                          from the current sector.
**         The bean requires on-chip FLASH memory (not used/allocated by
**         other beans).
**     Settings  :
**         FLASH memory type                 : Data FLASH
**         Memory size                       : 4096 words
**         Sector size                       : 256 words
**         Interrupt service                 : Disabled
**         Write method                      : Write
**         Wait in RAM                       : no
**     Contents  :
**         Busy                - bool DataFlash_Busy(byte Block);
**         EraseFlash          - byte DataFlash_EraseFlash(byte Block);
**         SetGlobalProtection - byte DataFlash_SetGlobalProtection(bool ProtectAll);
**         GetByteFlash        - byte DataFlash_GetByteFlash(DataFlash_TAddress Addr, byte *Data);
**         SetWordFlash        - byte DataFlash_SetWordFlash(DataFlash_TAddress Addr, word Data);
**         SetLongFlash        - byte DataFlash_SetLongFlash(DataFlash_TAddress Addr, dword Data);
**         SetBlockFlash       - byte DataFlash_SetBlockFlash(DataFlash_TDataAddress Source,...
**         DataPtr2Addr        - DataFlash_TAddress DataFlash_DataPtr2Addr(void* Addr);
**         FuncPtr2Addr        - DataFlash_TAddress DataFlash_FuncPtr2Addr(void(*Addr)());
**
**     Copyright : 1997 - 2009 Freescale Semiconductor, Inc. All Rights Reserved.
**     
**     http      : www.freescale.com
**     mail      : support@freescale.com
** ###################################################################*/

#ifndef __DataFlash
#define __DataFlash

/*Include shared modules, which are used for whole project*/
#include "PE_Types.h"
#include "PE_Error.h"
#include "PE_Const.h"
#include "IO_Map.h"

/* Include inherited beans */
#include "Cpu.h"

/* MODULE DataFlash. */

/* Identifier of the data flash register bank */
#define DATA_REG_BANK 1

/* FLASH memory size and location in 16-bit words */
#define DATA_FLASH_START 0x1000
#define DATA_FLASH_END   0x2000
#define DATA_FLASH_SECTOR_SIZE 256u

/* Common data fields for all IntFLASH bean's modules */
#ifndef CommonFlashData
#define CommonFlashData

/* Flash user mode commands */
#define ERASE_VERIFY 0x05
#define PROGRAM      0x20
#define PAGE_ERASE   0x40
#define MASS_ERASE   0x41

/* FLASH memory configuration fields locations */
#define FM_PROG_MEM_TOP 0x3fff
#define BOOT_PROT_LOC 6
#define PRGM_PROT_LOC 5
#define DATA_PROT_LOC 4

#endif /* Common data fields for all IntFLASH bean's modules */

/* Old symbols */
#define DataFlash_NumOfBlocks 0
#define DataFlashStart DATA_FLASH_START
#define DataFlashEnd   DATA_FLASH_END
#ifndef __BWUserType_DataFlash_TAddress
#define __BWUserType_DataFlash_TAddress
   typedef dword DataFlash_TAddress;   /* Bean type for address to the FLASH.*/
#endif
#ifndef __BWUserType_DataFlash_TDataAddress
#define __BWUserType_DataFlash_TDataAddress
  typedef dword DataFlash_TDataAddress; /* Bean type for data address. */
#endif


/*
Test the Command complete flag in the both register banks and
leave the original bank (the register bank is not changed after
the macro's execution is completed).
*/
#define DataFlash_Busy(Block) ((bool)( \
  (getRegBit(FMUSTAT,CCIF)) ? \
    (changeRegBits(FMCR, 3), \
    ((getRegBit(FMUSTAT,CCIF)) ? \
      (changeRegBits(FMCR, 3), \
      FALSE) \
    : (changeRegBits(FMCR, 3), \
    TRUE))) \
  : (TRUE)))
/*
** ===================================================================
**     Method      :  DataFlash_Busy (component IntFLASH)
**
**     Description :
**         Method return status of the FLASH device
**     Parameters  :
**         NAME            - DESCRIPTION
**         Block           - Block number. Not used for Freescale
**                           56800 and HCS12X derivates - any value may be passed.
**     Returns     :
**         ---             - TRUE/FALSE - FLASH is busy/ready
** ===================================================================
*/

byte DataFlash_EraseFlash(byte Block);
/*
** ===================================================================
**     Method      :  DataFlash_EraseFlash (component IntFLASH)
**
**     Description :
**         Erase all memory array of the selected Flash block.
**     Parameters  :
**         NAME            - DESCRIPTION
**         Block           - Block number. Not used for Freescale
**                           56800 derivates except for
**                           the Program_Boot_Flash on 56F83xx and
**                           56F81xx derivatives.
**     Returns     :
**         ---             - Error code, possible codes:
**                           - ERR_OK - OK
**                           - ERR_NOTAVAIL - Desired program/erase
**                           operation is not available
**                           - ERR_RANGE - Block number is out of
**                           range
**                           - ERR_SPEED - This device does not work
**                           in the active speed mode
** ===================================================================
*/

byte DataFlash_GetByteFlash(DataFlash_TAddress Addr,byte *Data);
/*
** ===================================================================
**     Method      :  DataFlash_GetByteFlash (component IntFLASH)
**
**     Description :
**         Get byte from address in FLASH.
**     Parameters  :
**         NAME            - DESCRIPTION
**         Addr            - Address to FLASH
**           Note: An address of the byte location is an 16-bit word
**                 location address multiplied by 2 and then the
**                 even/odd bytes are discriminated by LSB:
**                 0 for even byte, 1 for odd byte.
**       * Data            - Pointer to returned 8-bit data
**     Returns     :
**         ---             - Error code, possible codes:
**                           - ERR_OK - OK
**                           - ERR_RANGE - Address is out of range
** ===================================================================
*/

byte DataFlash_SetWordFlash(DataFlash_TAddress Addr,word Data);
/*
** ===================================================================
**     Method      :  DataFlash_SetWordFlash (component IntFLASH)
**
**     Description :
**         Write word to address in FLASH.
**     Parameters  :
**         NAME            - DESCRIPTION
**         Addr            - Address to FLASH.
**         Data            - Data to write.
**     Returns     :
**         ---             - Error code, possible codes:
**                           - ERR_OK - OK
**                           - ERR_NOTAVAIL - Desired program/erase
**                           operation is not available
**                           - ERR_RANGE - Address is out of range
**                           - ERR_VALUE - Read value is not equal to
**                           written value
**                           - ERR_SPEED - This device does not work
**                           in the active speed mode
** ===================================================================
*/

byte DataFlash_SetLongFlash(DataFlash_TAddress Addr,dword Data);
/*
** ===================================================================
**     Method      :  DataFlash_SetLongFlash (component IntFLASH)
**
**     Description :
**         Write long word to address in FLASH.
**     Parameters  :
**         NAME            - DESCRIPTION
**         Addr            - Address to FLASH.
**         Data            - Data to write.
**     Returns     :
**         ---             - Error code, possible codes:
**                           - ERR_OK - OK
**                           - ERR_NOTAVAIL - Desired program/erase
**                           operation is not available
**                           - ERR_RANGE - Address is out of range
**                           - ERR_VALUE - Read value is not equal to
**                           written value
**                           - ERR_SPEED - This device does not work
**                           in the active speed mode
** ===================================================================
*/

byte DataFlash_SetGlobalProtection(bool ProtectAll);
/*
** ===================================================================
**     Method      :  DataFlash_SetGlobalProtection (component IntFLASH)
**
**     Description :
**         Method makes all memory array of the selected FLASH
**         protected or unprotected. The protection state changes
**         are active till system reset.
**     Parameters  :
**         NAME            - DESCRIPTION
**         ProtectAll      - TRUE - The whole flash
**                           memory array of the selected flash is
**                           protected; FALSE - The whole flash
**                           memory array of the selected flash is
**                           unprotected.
**     Returns     :
**         ---             - Error code, possible codes:
**                           - ERR_OK - OK
**                           - ERR_NOTAVAIL - Desired program/erase
**                           operation is not available
**                           - ERR_VALUE - Read value is not equal to
**                           written value
**                           - ERR_SPEED - This device does not work
**                           in the active speed mode
** ===================================================================
*/

byte DataFlash_SetBlockFlash(DataFlash_TDataAddress Source,DataFlash_TAddress Dest,word Count);
/*
** ===================================================================
**     Method      :  DataFlash_SetBlockFlash (component IntFLASH)
**
**     Description :
**         Writes data to FLASH.
**     Parameters  :
**         NAME            - DESCRIPTION
**         Source          - Source address of the data
**         Dest            - Destination address in FLASH
**         Count           - Count of the data fields in the
**                           smallest addressable units.
**           Note 1: The smallest addressable unit for the used CPU
**                   is byte.
**           Note 2: An address of a byte location is an 16-bit word
**                   location address multiplied by 2 and then the
**                   even/odd bytes are discriminated by LSB:
**                   0 for even byte, 1 for odd byte.
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

#define DataFlash_DataPtr2Addr(DataPtr) ((DataFlash_TAddress)(DataPtr))
/*
** ===================================================================
**     Method      :  DataFlash_DataPtr2Addr (component IntFLASH)
**
**     Description :
**         This method converts data pointer to format of a bean method
**         address parameter. Generally a data pointer format is
**         different from format of a method Addr parameter.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * Addr            - Data pointer.
**     Returns     :
**         ---             - Address in the format used in the bean
**                           methods.
**                           Version specific information for 56800
**                           derivatives ] 
**                           The return value is address of a byte
**                           location of the object the input parameter
**                           - pointer pointing at (address of a 16 bit
**                           word location multiplied by 2 and the least
**                           significant bit determines even or odd byte).
** ===================================================================
*/

#define DataFlash_FuncPtr2Addr(FuncPtr) ((DataFlash_TAddress)(FuncPtr))
/*
** ===================================================================
**     Method      :  DataFlash_FuncPtr2Addr (component IntFLASH)
**
**     Description :
**         This method converts function pointer to format of a bean
**         method address parameter. Generally a function pointer
**         format is different from format of a method Addr parameter.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * Addr            - Function pointer.
**     Returns     :
**         ---             - Address in the format used in the bean
**                           methods.
**                           Version specific information for 56800
**                           derivatives ] 
**                           The return value is address of a byte
**                           location of the object the input parameter
**                           - pointer pointing at (address of a 16 bit
**                           word location multiplied by 2 and the least
**                           significant bit determines even or odd byte).
** ===================================================================
*/

/* END DataFlash. */

#endif /* ifndef __DataFlash */
/*
** ###################################################################
**
**     This file was created by Processor Expert 3.00 [04.35]
**     for the Freescale 56800 series of microcontrollers.
**
** ###################################################################
*/
